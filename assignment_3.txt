static int Q6(int[] nums){
        int res=nums[0];
        for(int i=1; i<nums.length; ++i){
            res=res^nums[i];
        }
        return res;
    }
static int[] Q5(int[] nums){

        boolean all9 = true;
        int i=0;
        while(i<nums.length){
            if(nums[i] != 9){
                all9 = false;
                break;
            }
            i++;
        }
        if (all9) {
            int[] res = new int[nums.length + 1];
            res[0] = 1;
            return res;
        }else{
            i=nums.length-1;
            int val = nums[i];
            int sum = val + 1;
            // nums[i] = sum; 
            int carry = sum / 10;
            nums[i] = sum % 10;
            --i;
            while(i>=0){
                sum = nums[i] + carry ;
                carry = sum / 10;
                nums[i] = sum % 10;
                --i; 
            }
        }
        return nums;
    }

static int Q4(int[] nums, int target){
    int s = 0;
    int e = nums.length-1;
    int mid = s + (e-s)/2;
    for (int i = 0; s <= e; i++) {
        if (target > nums[mid]) {
            s = mid + 1;
            mid = s + (e-s)/2;
        }else if(target < nums[mid]){
            e = mid - 1;
            mid = s + (e-s)/2;
        }else{
            return mid;
        }
    }
    return s;
}

static int Q1(int[] nums, int target) {
    int closest = Integer.MAX_VALUE, close = 0, i=0;
    while(i<nums.length){
        int j=0;
        while(j<nums.length){
            int k=0;
            while(k<nums.length){
                close = nums[i] + nums[j] + nums[k];
                if(Math.abs(target-close) <= Math.abs(target-closest) && (i != j && j != k && k !=i)){
                    closest = close;
                }
                ++k;
            }
            ++j;
        }
        ++i;
    }
    return closest;
}
